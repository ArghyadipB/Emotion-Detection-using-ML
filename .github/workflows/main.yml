name: CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  flake8-lint:
    runs-on: ubuntu-latest
    name: Lint
    steps:
      - name: Check out source repository
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: flake8 Lint
        uses: py-actions/flake8@v2

  test:
    runs-on: ubuntu-latest
    name: Run Python Tests
    needs: flake8-lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download NLTK Data
        run: |
          python -c "import nltk; nltk.download('stopwords')"
          python -c "import nltk; nltk.download('punkt_tab')"
          python -c "import nltk; nltk.download('wordnet')"
          python -c "import nltk; nltk.download('averaged_perceptron_tagger_eng')"

      - name: Run tests with pytest
        run: |
          pytest test.py

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Ensure that tests pass before deploying
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download NLTK Data
        run: |
          python -c "import nltk; nltk.download('stopwords')"
          python -c "import nltk; nltk.download('punkt')"
          python -c "import nltk; nltk.download('wordnet')"
          python -c "import nltk; nltk.download('averaged_perceptron_tagger')"

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true
